<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_system_yellow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>x = room_width / 2;
y = room_height / 2;

var menutheme = 0; 
var date = date_current_datetime();
if (date_get_month(date) = 9 and date_get_day(date) = 22) or 
    date_get_month(date) = 3 and (date_get_day(date) = 13 or
    date_get_day(date) = 24)
    {menutheme = "DS"}

switch(menutheme)
{   default: { //Default
    space = 64;
    }break;
    case "DS": { //DS
    space = 64;
    }break;
}

START = 0;
PLAY = 1;
    PRACTICE = 1;
    DUEL = 2;
    CANCEL0 = 3;
TOURNAMENT = 2;
OPTIONS = 3;
    FULLSCREEN = 1;
    SOUND = 2;
    KEYBINDING = 3;
    CANCEL1 = 4;
CREDIT = 4;
QUIT = 5;

chapter = 0;
mpos = 1;

menustart[START,PLAY] = "Play";
menustart[START,TOURNAMENT] = "Tournament"
menustart[START,OPTIONS] = "Options";
menustart[START,CREDIT] = "Credit";
menustart[START,QUIT] = "Exit";

menustart[PLAY,DUEL] = "Duel"
menustart[PLAY,PRACTICE] = "Practice"
menustart[PLAY,CANCEL0] = "Cancel"

menustart[OPTIONS,FULLSCREEN] = "Fullscreen"
menustart[OPTIONS,SOUND] = "Sound"
menustart[OPTIONS,KEYBINDING] = "Controls"
menustart[OPTIONS,CANCEL1] = "Cancel"

enum menustate {
    Start,
    Play,
    Tournament,
    Options
}

menustates = menustate.Start;

//***TEMPORARY CODE***//
device = 0;
gamepad_set_axis_deadzone(device, 0.2);
//********************//

scr_input_zero();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Run alarm
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if mb_any or scr_mouse_moving(){var input = 0;}
if vk_anykey or scr_controller_using(){var input = 1;}

//****INPUTS****//
switch(input){
    case 0:{break;}
    case 1:{
        scr_input_shift();
        var movey = inp_d[1] - inp_d[3] - sign(inp_yattack) - sign(inp_xmove);
        if movey != 0 and alarm[11] = -1 {
            alarm[11] = room_speed * 0.075
            mpos -= movey;
            if (mpos &lt; 1) mpos = array_length_2d(menustart,chapter) -1;
            if (mpos &gt; array_length_2d(menustart,chapter) -1) mpos = 1;
}break;}}

//****Navigate*through*menus****//
var {in = max(inp_b[3]); out = max(inp_b[0])}
if out {chapter = START;} else
if in {switch(menustart[chapter,mpos]){
case "Start":   {break;}
    case "Play":    {if in {chapter = PLAY;} break;}
        case "Duel":        {if in {} break;}
        case "Practice":    {if in {} break;}
        case "Tournament":  {if in {} break;}
    case "Options":  {if in {chapter = OPTIONS;} break;}
        case "Fullscreen":  {if in {} break;}
        case "Sound":       {if in {} break;}
        case "Controls":    {if in {} break;}
    case "Credit":  {if in {} if out {} break;}
    case "Exit":    {if in {game_end();} break;}
        case "Cancel":      {if in {chapter = START;} break;}
}}

//****Advanced*Menu****//
switch(menustates){
    case menustate.Start:     break;
    case menustate.Play:          break;
    case menustate.Tournament:    break;
    case menustate.Options:
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_halign(fa_left);
draw_set_valign(fa_middle);
draw_set_font(font0);
draw_set_color(c_white);

for ( var m = 1; m &lt; array_length_2d(menustart,chapter); m++ )
    {draw_text(x + space, y + (m * space),menustart[chapter,m])}
    draw_sprite(sprite_index, 0 , x + 16, y + mpos * space);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
