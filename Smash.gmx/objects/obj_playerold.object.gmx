<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_solidbox</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
global.runspeed = 120
alarm[0] = -1
cooldown = global.runspeed

global.kills = 0;

hspeed = 0; //Horisontal speed
hspd = 0;
spd = 0.04 //Running speed
sspd = 0.07 //Start speed
stop = 0.1 //Breaking speed
spdmax = 3
hair = 0.3 //Movement horisontal in the air
hairmax = 3 //Maximum free movement speed in the air

vspeed = 0; //Vertical speed
vspd = 0;
grav = 0.1; //Falling speed 
vwallgrind = 0.1

hspd_push = 0;
vspd_push = 0;

jspd = 5; //Jump speed
jcount = 1; //Numbers of extra jumps avalible
jcountres = jcount; //Jump count reset
jangle = 45 //A jump that calculates how far horisontaly and verticaly you go when walljumping
jwall = 3.4; //Jump from wall speed

timer0 = 0.3;

weapons_drawn = 0;
numofweap = 3;

global.score0 = 0
global.score1 = 0
global.score2 = 0 
global.score3 = 0

alarm[1] = 360;
alarm[2] = 480;

hp_max = 100
hp = hp_max
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>721</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>100</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
if irandom(1)==1  {
   if place_empty(x+300,y-30) and 2 &gt; instance_number(obj_slime){instance_create(x+300*sign(hspeed),y-30,obj_slime)}
   if place_empty(x-300,y-30) and 2 &gt; instance_number(obj_gorilla) {instance_create(x-300*sign(hspeed),y-30,obj_gorilla)}
} 
alarm[2] = 280;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
instance_deactivate_region(x-500,y-500,1000,1000,false,false)
instance_activate_region(x-500,y-500,1000,1000,true)
alarm[1] = 120
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Platform movement

//Get inputs
var rkey = keyboard_check(vk_right) or keyboard_check(ord('D')); //Right key
var lkey = keyboard_check(vk_left) or keyboard_check(ord('A')); //Left key
var ukey = keyboard_check(vk_up) or keyboard_check(ord('W')); //Up key
var dkey = keyboard_check(vk_down) or keyboard_check(ord('S')); //Down key
var jkeyh = keyboard_check(vk_space); //Jump key held down
var jkeyp = keyboard_check_pressed(vk_space); //Pulse effekt

///On ground
if place_meeting(x,y+1,obj_solid) {
    
    //Jump resets only on ground, not while hitting the roof
    jcount = jcountres;

    //Jump from ground
    if jkeyp {
        vspd = - jspd - vspeed
    }
    
    //Moving horisontal
    if (rkey xor lkey) and (hspd &lt; spdmax) and (hspd &gt; - spdmax) {
        if hspd &lt; 1 or hspd &gt; -1{
            hspd += (rkey - lkey) * sspd
            
            //Turn around
            if sign(hspd) = sign(lkey - rkey) {
                hspd = (rkey - lkey) * stop * sspd
            }

        } else {
            hspd += (rkey - lkey) * spd
        }
    } else if !(hspd = 0) {
        hspd += - stop * sign(hspd);
        if hspd &lt; 1 and -1 &lt; hspd {
            hspd = 0;
        }
    }    
} else { 
    ///Not on ground
    
    ///On wall
    if place_meeting(x+1,y,obj_solid) or place_meeting(x-1,y,obj_solid){
        
        //Where is wall?
        var wallside = sign(place_meeting(x-1,y,obj_solid) - place_meeting(x+1,y,obj_solid))
        
        //Gravity on wall
        if (sign(vspd) = -1) or !(lkey or rkey) {
            vspd += grav 
        }
        else {
            vspd += grav * vwallgrind
        }
                
        //Jump while on wall
        if jkeyp {
            vspd = - sin(jangle) * jwall; hspd = cos(jangle) * jwall * wallside            
        }else{
            //Release from wall
            if (rkey and wallside = 1)xor (lkey and wallside = -1){
                hspd += (rkey - lkey) * spd / hair
            }
        }
    }else{
        ///Not on wall
        
        //Gravity not on wall
        vspd += grav
                
        //Jump while in air
        if jkeyp &amp;&amp; !(jcount &lt; 1) {
            vspd = - jspd
            jcount += -1
            if (rkey xor lkey){
               hspd = hspeed + hair * (rkey - lkey) * 2
            }
        }
        
        //Movement horisontal
        if (rkey xor lkey) and (hspd &lt; hairmax) and (hspd &gt; - hairmax){
        hspd += (rkey - lkey) * spd * hair
        }
    }
}

//Jump cancell stuff
if (!vspd &gt; 0) and (!jkeyh){vspd = max(vspd, -jspd/2)}
/*
scr_collision();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Exit Game
//if keyboard_check_pressed(vk_escape) {game_end()}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var pc;
pc = (hp / hp_max) * 100;
draw_healthbar(100, 100, 500, 200, pc, c_black, c_red, c_lime, 0, true, true);

if (pc &lt; 0) {room_restart();}

if global.kills &gt; 10 and room_next(room) != -1
    {
    room_goto(room_next(room));
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw the health
/*
draw_text(32,32,string(global.score0));
draw_text(32,48,string(global.score1));
draw_text(32,64,string(global.score2));
draw_text(32,80,string(global.score3));
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var pc;
pc = (hp / hp_max) * 100;
draw_healthbar(100, 100, 500, 200, pc, c_black, c_red, c_lime, 0, true, true)

if pc &lt; 0 {room_restart}

if global.kills &gt; 10 {room_next}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
